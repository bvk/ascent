// Copyright (c) 2016 BVK Chaitanya
//
// This file is part of the Ascent Library.
//
// The Ascent Library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The Ascent Library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with the Ascent Library.  If not, see <http://www.gnu.org/licenses/>.

//
// This file defines wal record format for paxos/classic package.
//

package ascent.paxos.classic;
option go_package = "classic";

message WALRecord {
  optional Checkpoint checkpoint = 1;

  optional Configuration config_change = 2;

  optional ProposerChange proposer_change = 3;
  optional LearnerChange learner_change = 4;
  optional AcceptorChange acceptor_change = 5;
}

message Checkpoint {
  required Configuration configuration = 1;
  optional ProposerState proposer_state = 2;
  optional AcceptorState acceptor_state = 3;
  optional LearnerState learner_state = 4;
}

message Configuration {
  repeated string proposer_list = 1;
  repeated string acceptor_list = 2;
  repeated string learner_list = 3;
  required int32 majority_size = 4;

  optional bool is_learner = 5;
  optional bool is_acceptor = 6;
  optional bool is_proposer = 7;

  optional int32 proposer_index = 8;
}

message ProposerState {
  required int64 proposal_ballot = 1;
}

message AcceptorState {
  required int64 promised_ballot = 1;

  required int64 voted_ballot = 2;
  required bytes voted_value = 3;

  repeated int64 acked_ballot_list = 4;
  repeated string acked_learner_list = 5;
}

message LearnerState {
  optional bytes chosen_value = 1;

  repeated int64 voted_ballot_list = 2;
  repeated bytes voted_value_list = 3;
  repeated string voted_acceptor_list = 4;
}

message ProposerChange {
  optional int64 proposal_ballot = 1;
}

message AcceptorChange {
  optional int64 promised_ballot = 1;

  optional int64 voted_ballot = 2;
  optional bytes voted_value = 3;

  optional int64 acked_ballot = 4;
  optional string acked_learner = 5;
}

message LearnerChange {
  optional bytes chosen_value = 1;

  optional int64 voted_ballot = 2;
  optional bytes voted_value = 3;
  optional string voted_acceptor = 4;
}
